/* Auto-generated by genmsg_cpp for file /home/super/ros_workspace/image_adaptor/srv/normalImage.srv */
#ifndef IMAGE_ADAPTOR_SERVICE_NORMALIMAGE_H
#define IMAGE_ADAPTOR_SERVICE_NORMALIMAGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "sensor_msgs/Image.h"

namespace image_adaptor
{
template <class ContainerAllocator>
struct normalImageRequest_ {
  typedef normalImageRequest_<ContainerAllocator> Type;

  normalImageRequest_()
  : topicName()
  , nImages(0)
  {
  }

  normalImageRequest_(const ContainerAllocator& _alloc)
  : topicName(_alloc)
  , nImages(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topicName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  topicName;

  typedef int64_t _nImages_type;
  int64_t nImages;


private:
  static const char* __s_getDataType_() { return "image_adaptor/normalImageRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "af8ad02b46d61aef136a826c5d08279b"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "b5607901045b06c3620e4e142df98f90"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "string topicName\n\
int64 nImages\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, topicName);
    ros::serialization::serialize(stream, nImages);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, topicName);
    ros::serialization::deserialize(stream, nImages);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(topicName);
    size += ros::serialization::serializationLength(nImages);
    return size;
  }

  typedef boost::shared_ptr< ::image_adaptor::normalImageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_adaptor::normalImageRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct normalImageRequest
typedef  ::image_adaptor::normalImageRequest_<std::allocator<void> > normalImageRequest;

typedef boost::shared_ptr< ::image_adaptor::normalImageRequest> normalImageRequestPtr;
typedef boost::shared_ptr< ::image_adaptor::normalImageRequest const> normalImageRequestConstPtr;


template <class ContainerAllocator>
struct normalImageResponse_ {
  typedef normalImageResponse_<ContainerAllocator> Type;

  normalImageResponse_()
  : images()
  {
  }

  normalImageResponse_(const ContainerAllocator& _alloc)
  : images(_alloc)
  {
  }

  typedef std::vector< ::sensor_msgs::Image_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::Image_<ContainerAllocator> >::other >  _images_type;
  std::vector< ::sensor_msgs::Image_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::Image_<ContainerAllocator> >::other >  images;


  ROS_DEPRECATED uint32_t get_images_size() const { return (uint32_t)images.size(); }
  ROS_DEPRECATED void set_images_size(uint32_t size) { images.resize((size_t)size); }
  ROS_DEPRECATED void get_images_vec(std::vector< ::sensor_msgs::Image_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::Image_<ContainerAllocator> >::other > & vec) const { vec = this->images; }
  ROS_DEPRECATED void set_images_vec(const std::vector< ::sensor_msgs::Image_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::Image_<ContainerAllocator> >::other > & vec) { this->images = vec; }
private:
  static const char* __s_getDataType_() { return "image_adaptor/normalImageResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "465f5ebe142654711d8c5bf4770df57a"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "b5607901045b06c3620e4e142df98f90"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "sensor_msgs/Image[] images\n\
\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, images);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, images);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(images);
    return size;
  }

  typedef boost::shared_ptr< ::image_adaptor::normalImageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_adaptor::normalImageResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct normalImageResponse
typedef  ::image_adaptor::normalImageResponse_<std::allocator<void> > normalImageResponse;

typedef boost::shared_ptr< ::image_adaptor::normalImageResponse> normalImageResponsePtr;
typedef boost::shared_ptr< ::image_adaptor::normalImageResponse const> normalImageResponseConstPtr;

struct normalImage
{

typedef normalImageRequest Request;
typedef normalImageResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct normalImage
} // namespace image_adaptor

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::image_adaptor::normalImageRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::image_adaptor::normalImageRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::image_adaptor::normalImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "af8ad02b46d61aef136a826c5d08279b";
  }

  static const char* value(const  ::image_adaptor::normalImageRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaf8ad02b46d61aefULL;
  static const uint64_t static_value2 = 0x136a826c5d08279bULL;
};

template<class ContainerAllocator>
struct DataType< ::image_adaptor::normalImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_adaptor/normalImageRequest";
  }

  static const char* value(const  ::image_adaptor::normalImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::image_adaptor::normalImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string topicName\n\
int64 nImages\n\
\n\
";
  }

  static const char* value(const  ::image_adaptor::normalImageRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::image_adaptor::normalImageResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::image_adaptor::normalImageResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::image_adaptor::normalImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "465f5ebe142654711d8c5bf4770df57a";
  }

  static const char* value(const  ::image_adaptor::normalImageResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x465f5ebe14265471ULL;
  static const uint64_t static_value2 = 0x1d8c5bf4770df57aULL;
};

template<class ContainerAllocator>
struct DataType< ::image_adaptor::normalImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_adaptor/normalImageResponse";
  }

  static const char* value(const  ::image_adaptor::normalImageResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::image_adaptor::normalImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/Image[] images\n\
\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::image_adaptor::normalImageResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::image_adaptor::normalImageRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.topicName);
    stream.next(m.nImages);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct normalImageRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::image_adaptor::normalImageResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.images);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct normalImageResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<image_adaptor::normalImage> {
  static const char* value() 
  {
    return "b5607901045b06c3620e4e142df98f90";
  }

  static const char* value(const image_adaptor::normalImage&) { return value(); } 
};

template<>
struct DataType<image_adaptor::normalImage> {
  static const char* value() 
  {
    return "image_adaptor/normalImage";
  }

  static const char* value(const image_adaptor::normalImage&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<image_adaptor::normalImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b5607901045b06c3620e4e142df98f90";
  }

  static const char* value(const image_adaptor::normalImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<image_adaptor::normalImageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_adaptor/normalImage";
  }

  static const char* value(const image_adaptor::normalImageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<image_adaptor::normalImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b5607901045b06c3620e4e142df98f90";
  }

  static const char* value(const image_adaptor::normalImageResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<image_adaptor::normalImageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "image_adaptor/normalImage";
  }

  static const char* value(const image_adaptor::normalImageResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IMAGE_ADAPTOR_SERVICE_NORMALIMAGE_H


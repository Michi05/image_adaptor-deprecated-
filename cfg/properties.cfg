#!/usr/bin/env python
PACKAGE = "image_adaptor"
import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()


# TODO Only offer modes supported by known hardware
output_mode_enum = gen.enum([  gen.const(  "SXGA_15Hz", int_t, 1, "1280x1024@15Hz"),
                               gen.const(   "VGA_30Hz", int_t, 2, "640x480@30Hz"),
                               gen.const(   "VGA_25Hz", int_t, 3, "640x480@25Hz"),
                               gen.const(  "QVGA_25Hz", int_t, 4, "320x240@25Hz"),
                               gen.const(  "QVGA_30Hz", int_t, 5, "320x240@30Hz"),
                               gen.const(  "QVGA_60Hz", int_t, 6, "320x240@60Hz"),
                               gen.const( "QQVGA_25Hz", int_t, 7, "160x120@25Hz"),
                               gen.const( "QQVGA_30Hz", int_t, 8, "160x120@30Hz"),
                               gen.const( "QQVGA_60Hz", int_t, 9, "160x120@60Hz")],
                               "output mode")

# From here on the level codes are:
        #       '1' for the main camera driver properties
        #       '2' for the auxiliar camera driver properties
        #       '4' for the main camera driver topics
        #       '8' for other new things

##  gen.add("name", type_t, strangeLevelCode, "Description", MinValue, MaxValue, DefaultValue)
gen.add("image_mode", int_t, 1, "Image output mode for the color/grayscale image", 2, 1, 9, edit_method = output_mode_enum)
gen.add("depth_mode", int_t, 1, "depth output mode", 2, 2, 9, edit_method = output_mode_enum)


gen.add("depth_registration", bool_t, 1, "Depth data registration activated or not", False)

gen.add("data_skip",  int_t, 1, "Skip N images for every image published (rgb/depth/depth_registered/ir)", 0, 0, 10)

gen.add("depth_time_offset", double_t, 1, "depth image time offset in seconds", 0.0, -1.0, 1.0 );
gen.add("image_time_offset", double_t, 1, "image time offset in seconds", 0.0, -1.0, 1.0 );

gen.add("depth_ir_offset_x", double_t, 1, "X offset between IR and depth images", 5.0, -10.0, 10.0)
gen.add("depth_ir_offset_y", double_t, 1, "Y offset between IR and depth images", 4.0, -10.0, 10.0)
gen.add("z_offset_mm", int_t, 1, "Z coordinate offset in mm", 0, -50, 50)

## Added specifications to the original values
gen.add("rgb_resolution", int_t, 1, "Specific resolution for RGB camera", 2, 1, 4)
gen.add("rgb_frequency", int_t, 1, "Specific frequency for RGB camera", 30, 15, 60)

gen.add("depth_resolution", int_t, 1, "Specific resolution for Depth camera", 2, 1, 4)
gen.add("depth_frequency", int_t, 1, "Specific frequency for Depth camera", 30, 15, 60)
##freq==framerate??

##gen.add("prop_device_id", **Deviceid**, 8, "Deviceid", 0, 100, 50)

##<!-- TOPICS: -->
gen.add("cur_tilt_angle", double_t, 2, "Current real tilt of the camera", 0.0, -65.0, 65.0)
gen.add("tilt_angle", double_t, 2, "Base-camera angle", 0, -31, 31)
gen.add("led_option", int_t, 2, "Led color and blinking mode state ", 4, 0, 8)
##gen.add("imu" value="/imu,sensor_msgs/Imu,publishedTopic" />

## Topic renamings:

gen.add("rect_rgb_image", str_t, 4, "Rgb rectified image", "Hello World")
#gen.add("rect_rgb_image", str_t, 4, "Rgb rectified image", "/camera/rgb/image_rect_color")

#gen.add("size", int_t, 8, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "image_adaptor", "Properties"))


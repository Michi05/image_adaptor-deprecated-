//#line 2 "/opt/ros/electric/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
// *********************************************************
// 
// File autogenerated for the image_adaptor package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

/***********************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2008, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 ***********************************************************/

// Author: Blaise Gassend


#ifndef __image_adaptor__PROPERTIESCONFIG_H__
#define __image_adaptor__PROPERTIESCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/config_init_mutex.h>

namespace image_adaptor
{
  class PropertiesConfigStatics;
  
  class PropertiesConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(PropertiesConfig &config, const PropertiesConfig &max, const PropertiesConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const PropertiesConfig &config1, const PropertiesConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, PropertiesConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const PropertiesConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, PropertiesConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const PropertiesConfig &config) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T PropertiesConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (PropertiesConfig::* field);

      virtual void clamp(PropertiesConfig &config, const PropertiesConfig &max, const PropertiesConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const PropertiesConfig &config1, const PropertiesConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, PropertiesConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const PropertiesConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, PropertiesConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const PropertiesConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }
    };

//#line 29 "../cfg/properties.cfg"
      int image_mode;
//#line 30 "../cfg/properties.cfg"
      int depth_mode;
//#line 33 "../cfg/properties.cfg"
      bool depth_registration;
//#line 35 "../cfg/properties.cfg"
      int data_skip;
//#line 37 "../cfg/properties.cfg"
      double depth_time_offset;
//#line 38 "../cfg/properties.cfg"
      double image_time_offset;
//#line 40 "../cfg/properties.cfg"
      double depth_ir_offset_x;
//#line 41 "../cfg/properties.cfg"
      double depth_ir_offset_y;
//#line 42 "../cfg/properties.cfg"
      int z_offset_mm;
//#line 45 "../cfg/properties.cfg"
      int rgb_resolution;
//#line 46 "../cfg/properties.cfg"
      int rgb_frequency;
//#line 47 "../cfg/properties.cfg"
      int rgb/resolution;
//#line 48 "../cfg/properties.cfg"
      int rgb/frequency;
//#line 50 "../cfg/properties.cfg"
      int depth_resolution;
//#line 51 "../cfg/properties.cfg"
      int depth_frequency;
//#line 57 "../cfg/properties.cfg"
      double cur_tilt_angle;
//#line 58 "../cfg/properties.cfg"
      double tilt_angle;
//#line 59 "../cfg/properties.cfg"
      int led_option;
//#line 64 "../cfg/properties.cfg"
      std::string rect_rgb_image;
//#line 138 "/opt/ros/electric/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        if ((*i)->fromMessage(msg, *this))
          count++;
      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("PropertiesConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toMessage(msg, *this);
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      __toMessage__(msg, __param_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->fromServer(nh, *this);
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const PropertiesConfig &__max__ = __getMax__();
      const PropertiesConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const PropertiesConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const PropertiesConfig &__getDefault__();
    static const PropertiesConfig &__getMax__();
    static const PropertiesConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    
  private:
    static const PropertiesConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void PropertiesConfig::ParamDescription<std::string>::clamp(PropertiesConfig &config, const PropertiesConfig &max, const PropertiesConfig &min) const
  {
    return;
  }

  class PropertiesConfigStatics
  {
    friend class PropertiesConfig;
    
    PropertiesConfigStatics()
    {
//#line 29 "../cfg/properties.cfg"
      __min__.image_mode = 1;
//#line 29 "../cfg/properties.cfg"
      __max__.image_mode = 9;
//#line 29 "../cfg/properties.cfg"
      __default__.image_mode = 2;
//#line 29 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<int>("image_mode", "int", 1, "Image output mode for the color/grayscale image", "{'enum_description': 'output mode', 'enum': [{'srcline': 11, 'description': '1280x1024@15Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_15Hz'}, {'srcline': 12, 'description': '640x480@30Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'VGA_30Hz'}, {'srcline': 13, 'description': '640x480@25Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'VGA_25Hz'}, {'srcline': 14, 'description': '320x240@25Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_25Hz'}, {'srcline': 15, 'description': '320x240@30Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_30Hz'}, {'srcline': 16, 'description': '320x240@60Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_60Hz'}, {'srcline': 17, 'description': '160x120@25Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_25Hz'}, {'srcline': 18, 'description': '160x120@30Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_30Hz'}, {'srcline': 19, 'description': '160x120@60Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_60Hz'}]}", &PropertiesConfig::image_mode)));
//#line 30 "../cfg/properties.cfg"
      __min__.depth_mode = 2;
//#line 30 "../cfg/properties.cfg"
      __max__.depth_mode = 9;
//#line 30 "../cfg/properties.cfg"
      __default__.depth_mode = 2;
//#line 30 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<int>("depth_mode", "int", 1, "depth output mode", "{'enum_description': 'output mode', 'enum': [{'srcline': 11, 'description': '1280x1024@15Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_15Hz'}, {'srcline': 12, 'description': '640x480@30Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'VGA_30Hz'}, {'srcline': 13, 'description': '640x480@25Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'VGA_25Hz'}, {'srcline': 14, 'description': '320x240@25Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_25Hz'}, {'srcline': 15, 'description': '320x240@30Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_30Hz'}, {'srcline': 16, 'description': '320x240@60Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_60Hz'}, {'srcline': 17, 'description': '160x120@25Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_25Hz'}, {'srcline': 18, 'description': '160x120@30Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_30Hz'}, {'srcline': 19, 'description': '160x120@60Hz', 'srcfile': '../cfg/properties.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_60Hz'}]}", &PropertiesConfig::depth_mode)));
//#line 33 "../cfg/properties.cfg"
      __min__.depth_registration = 0;
//#line 33 "../cfg/properties.cfg"
      __max__.depth_registration = 1;
//#line 33 "../cfg/properties.cfg"
      __default__.depth_registration = 0;
//#line 33 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<bool>("depth_registration", "bool", 1, "Depth data registration activated or not", "", &PropertiesConfig::depth_registration)));
//#line 35 "../cfg/properties.cfg"
      __min__.data_skip = 0;
//#line 35 "../cfg/properties.cfg"
      __max__.data_skip = 10;
//#line 35 "../cfg/properties.cfg"
      __default__.data_skip = 0;
//#line 35 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<int>("data_skip", "int", 1, "Skip N images for every image published (rgb/depth/depth_registered/ir)", "", &PropertiesConfig::data_skip)));
//#line 37 "../cfg/properties.cfg"
      __min__.depth_time_offset = -1.0;
//#line 37 "../cfg/properties.cfg"
      __max__.depth_time_offset = 1.0;
//#line 37 "../cfg/properties.cfg"
      __default__.depth_time_offset = 0.0;
//#line 37 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<double>("depth_time_offset", "double", 1, "depth image time offset in seconds", "", &PropertiesConfig::depth_time_offset)));
//#line 38 "../cfg/properties.cfg"
      __min__.image_time_offset = -1.0;
//#line 38 "../cfg/properties.cfg"
      __max__.image_time_offset = 1.0;
//#line 38 "../cfg/properties.cfg"
      __default__.image_time_offset = 0.0;
//#line 38 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<double>("image_time_offset", "double", 1, "image time offset in seconds", "", &PropertiesConfig::image_time_offset)));
//#line 40 "../cfg/properties.cfg"
      __min__.depth_ir_offset_x = -10.0;
//#line 40 "../cfg/properties.cfg"
      __max__.depth_ir_offset_x = 10.0;
//#line 40 "../cfg/properties.cfg"
      __default__.depth_ir_offset_x = 5.0;
//#line 40 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<double>("depth_ir_offset_x", "double", 1, "X offset between IR and depth images", "", &PropertiesConfig::depth_ir_offset_x)));
//#line 41 "../cfg/properties.cfg"
      __min__.depth_ir_offset_y = -10.0;
//#line 41 "../cfg/properties.cfg"
      __max__.depth_ir_offset_y = 10.0;
//#line 41 "../cfg/properties.cfg"
      __default__.depth_ir_offset_y = 4.0;
//#line 41 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<double>("depth_ir_offset_y", "double", 1, "Y offset between IR and depth images", "", &PropertiesConfig::depth_ir_offset_y)));
//#line 42 "../cfg/properties.cfg"
      __min__.z_offset_mm = -50;
//#line 42 "../cfg/properties.cfg"
      __max__.z_offset_mm = 50;
//#line 42 "../cfg/properties.cfg"
      __default__.z_offset_mm = 0;
//#line 42 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<int>("z_offset_mm", "int", 1, "Z coordinate offset in mm", "", &PropertiesConfig::z_offset_mm)));
//#line 45 "../cfg/properties.cfg"
      __min__.rgb_resolution = 1;
//#line 45 "../cfg/properties.cfg"
      __max__.rgb_resolution = 4;
//#line 45 "../cfg/properties.cfg"
      __default__.rgb_resolution = 2;
//#line 45 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<int>("rgb_resolution", "int", 1, "Specific resolution for RGB camera", "", &PropertiesConfig::rgb_resolution)));
//#line 46 "../cfg/properties.cfg"
      __min__.rgb_frequency = 15;
//#line 46 "../cfg/properties.cfg"
      __max__.rgb_frequency = 60;
//#line 46 "../cfg/properties.cfg"
      __default__.rgb_frequency = 30;
//#line 46 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<int>("rgb_frequency", "int", 1, "Specific frequency for RGB camera", "", &PropertiesConfig::rgb_frequency)));
//#line 47 "../cfg/properties.cfg"
      __min__.rgb/resolution = 1;
//#line 47 "../cfg/properties.cfg"
      __max__.rgb/resolution = 4;
//#line 47 "../cfg/properties.cfg"
      __default__.rgb/resolution = 2;
//#line 47 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<int>("rgb/resolution", "int", 1, "Specific resolution for RGB camera", "", &PropertiesConfig::rgb/resolution)));
//#line 48 "../cfg/properties.cfg"
      __min__.rgb/frequency = 15;
//#line 48 "../cfg/properties.cfg"
      __max__.rgb/frequency = 60;
//#line 48 "../cfg/properties.cfg"
      __default__.rgb/frequency = 30;
//#line 48 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<int>("rgb/frequency", "int", 1, "Specific frequency for RGB camera", "", &PropertiesConfig::rgb/frequency)));
//#line 50 "../cfg/properties.cfg"
      __min__.depth_resolution = 1;
//#line 50 "../cfg/properties.cfg"
      __max__.depth_resolution = 4;
//#line 50 "../cfg/properties.cfg"
      __default__.depth_resolution = 2;
//#line 50 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<int>("depth_resolution", "int", 1, "Specific resolution for Depth camera", "", &PropertiesConfig::depth_resolution)));
//#line 51 "../cfg/properties.cfg"
      __min__.depth_frequency = 15;
//#line 51 "../cfg/properties.cfg"
      __max__.depth_frequency = 60;
//#line 51 "../cfg/properties.cfg"
      __default__.depth_frequency = 30;
//#line 51 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<int>("depth_frequency", "int", 1, "Specific frequency for Depth camera", "", &PropertiesConfig::depth_frequency)));
//#line 57 "../cfg/properties.cfg"
      __min__.cur_tilt_angle = -65.0;
//#line 57 "../cfg/properties.cfg"
      __max__.cur_tilt_angle = 65.0;
//#line 57 "../cfg/properties.cfg"
      __default__.cur_tilt_angle = 0.0;
//#line 57 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<double>("cur_tilt_angle", "double", 2, "Current real tilt of the camera", "", &PropertiesConfig::cur_tilt_angle)));
//#line 58 "../cfg/properties.cfg"
      __min__.tilt_angle = -31.0;
//#line 58 "../cfg/properties.cfg"
      __max__.tilt_angle = 31.0;
//#line 58 "../cfg/properties.cfg"
      __default__.tilt_angle = 0.0;
//#line 58 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<double>("tilt_angle", "double", 2, "Base-camera angle", "", &PropertiesConfig::tilt_angle)));
//#line 59 "../cfg/properties.cfg"
      __min__.led_option = 0;
//#line 59 "../cfg/properties.cfg"
      __max__.led_option = 8;
//#line 59 "../cfg/properties.cfg"
      __default__.led_option = 4;
//#line 59 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<int>("led_option", "int", 2, "Led color and blinking mode state ", "", &PropertiesConfig::led_option)));
//#line 64 "../cfg/properties.cfg"
      __min__.rect_rgb_image = "";
//#line 64 "../cfg/properties.cfg"
      __max__.rect_rgb_image = "";
//#line 64 "../cfg/properties.cfg"
      __default__.rect_rgb_image = "Hello World";
//#line 64 "../cfg/properties.cfg"
      __param_descriptions__.push_back(PropertiesConfig::AbstractParamDescriptionConstPtr(new PropertiesConfig::ParamDescription<std::string>("rect_rgb_image", "str", 4, "Rgb rectified image", "", &PropertiesConfig::rect_rgb_image)));
//#line 239 "/opt/ros/electric/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
    
      for (std::vector<PropertiesConfig::AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        __description_message__.parameters.push_back(**i);
      __max__.__toMessage__(__description_message__.max, __param_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__); 
    }
    std::vector<PropertiesConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    PropertiesConfig __max__;
    PropertiesConfig __min__;
    PropertiesConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;
    static const PropertiesConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static PropertiesConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &PropertiesConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const PropertiesConfig &PropertiesConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const PropertiesConfig &PropertiesConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const PropertiesConfig &PropertiesConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<PropertiesConfig::AbstractParamDescriptionConstPtr> &PropertiesConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const PropertiesConfigStatics *PropertiesConfig::__get_statics__()
  {
    const static PropertiesConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = PropertiesConfigStatics::get_instance();
    
    return statics;
  }

//#line 11 "../cfg/properties.cfg"
      const int Properties_SXGA_15Hz = 1;
//#line 12 "../cfg/properties.cfg"
      const int Properties_VGA_30Hz = 2;
//#line 13 "../cfg/properties.cfg"
      const int Properties_VGA_25Hz = 3;
//#line 14 "../cfg/properties.cfg"
      const int Properties_QVGA_25Hz = 4;
//#line 15 "../cfg/properties.cfg"
      const int Properties_QVGA_30Hz = 5;
//#line 16 "../cfg/properties.cfg"
      const int Properties_QVGA_60Hz = 6;
//#line 17 "../cfg/properties.cfg"
      const int Properties_QQVGA_25Hz = 7;
//#line 18 "../cfg/properties.cfg"
      const int Properties_QQVGA_30Hz = 8;
//#line 19 "../cfg/properties.cfg"
      const int Properties_QQVGA_60Hz = 9;
}

#endif // __PROPERTIESRECONFIGURATOR_H__
